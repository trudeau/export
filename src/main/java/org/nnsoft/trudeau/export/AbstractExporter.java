package org.nnsoft.trudeau.export;

/*
 *   Copyright 2013 - 2018 The Trudeau Project
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

import static java.lang.String.format;
import static java.util.Objects.requireNonNull;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.Set;
import java.util.function.Function;

import com.google.common.graph.EndpointPair;
import com.google.common.graph.ValueGraph;

abstract class AbstractExporter<N, E, T extends AbstractExporter<N, E, T>>
{

    private static final String G = "G";

    private final ValueGraph<N, E> graph;

    private final Map<String, Function<N, ?>> nodeProperties;

    private final Map<String, Function<E, ?>> edgeProperties;

    private final String name;

    private Writer writer;

    public AbstractExporter( ValueGraph<N, E> graph, String name )
    {
        this.graph = graph;
        this.writer = null;
        this.nodeProperties = new HashMap<String, Function<N, ?>>();
        this.edgeProperties = new HashMap<String, Function<E, ?>>();
        this.name = name != null ? name : G;
    }

    public final void to( File outputFile )
        throws GraphExportException
    {
        try
        {
            to( new FileOutputStream( requireNonNull( outputFile, "Impossibe to export the graph in a null file" ) ) );
        }
        catch ( FileNotFoundException e )
        {
            throw new RuntimeException( e );
        }
    }

    public final void to( OutputStream outputStream )
        throws GraphExportException
    {
        to( new OutputStreamWriter( requireNonNull( outputStream, "Impossibe to export the graph in a null stream" ) ) );
    }

    public final void to( Writer writer )
        throws GraphExportException
    {
        this.writer = requireNonNull( writer, "Impossibe to export the graph in a null stream" );

        try
        {
            startSerialization();
            comment( format( "Graph generated by Trudeau Graph Exporter on %s%n", new Date() ) );

            startGraph( name );

            // this is basically for the GraphML



            // END

            for ( N node : graph.nodes() )
            {
                Map<String, Object> properties = new HashMap<String, Object>( nodeProperties.size() );

                for ( Entry<String, Function<N, ?>> vertexProperty : nodeProperties.entrySet() )
                {
                    properties.put( vertexProperty.getKey(),
                                    vertexProperty.getValue().apply( node ) );
                }

                vertex( node, properties );
            }

            Set<EndpointPair<N>> edges = graph.edges();
            if ( edges != null && !edges.isEmpty() )
            {
                for ( EndpointPair<N> edge : graph.edges() )
                {
                    Optional<E> edgeValue = graph.edgeValue( edge.nodeU(), edge.nodeV() );

                    if ( edgeValue.isPresent() )
                    {
                        Map<String, Object> properties = new HashMap<String, Object>( edgeProperties.size() );

                        for ( Entry<String, Function<E, ?>> edgeProperty : edgeProperties.entrySet() )
                        {
                            properties.put( edgeProperty.getKey(),
                                            edgeProperty.getValue().apply( edgeValue.get() ) );
                        }

                        edge( edgeValue.get(), edge.nodeU(), edge.nodeV(), properties );
                    }
                }
            }

            endGraph();

            endSerialization();
        }
        catch ( Exception e )
        {
            throw new GraphExportException( e, "an error occurred while exporting graph %s (named %s) to writer %s",
                                            graph,
                                            name,
                                            writer );
        }
        finally
        {
            try
            {
                writer.close();
            }
            catch ( IOException e )
            {
                // swallow it
            }
        }
    }

    protected final ValueGraph<N, E> getGraph()
    {
        return graph;
    }

    protected final Writer getWriter()
    {
        return writer;
    }
    
    protected void addVertexProperty( String propertyName, Function<N, ?> vertexProperty )
    {
        this.nodeProperties.put( propertyName, vertexProperty );
    }

    protected void addEdgeProperty( String propertyName, Function<E, ?> edgeProperty )
    {
        this.edgeProperties.put( propertyName, edgeProperty );
    }

    protected abstract void startSerialization()
        throws Exception;

    protected abstract void endSerialization()
        throws Exception;

    protected abstract void startGraph( String name )
        throws Exception;

    protected abstract void endGraph()
        throws Exception;

    protected abstract void comment( String text )
        throws Exception;

    protected abstract void enlistNodesProperty( String name, Class<?> type )
        throws Exception;

    protected abstract void enlistEdgesProperty( String name, Class<?> type )
        throws Exception;

    protected abstract void vertex( N vertex, Map<String, Object> properties )
        throws Exception;

    protected abstract void edge( E edge, N head, N tail, Map<String, Object> properties )
        throws Exception;

}
